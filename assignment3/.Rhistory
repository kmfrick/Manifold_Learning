library(stops)
library(dplyr)
zip.train <- read.table("zip.train")
zeros <- filter(zip.train, V1==0)
zeros <- as.matrix(zeros[,-1])
# plotting 1 digit
plot.zip <- function(x,use.first=FALSE,...){ x<-as.numeric(x)
if (use.first){
x.mat <- matrix(x,16,16) }else{
x.mat <- matrix(x[-1],16,16) }
image(1:16,1:16,x.mat[,16:1], col=gray(seq(1,0,l=12)),...)
invisible(
if (!use.first){
title(x[1]) }else{
} )
#col=gray(seq(1,0,l=2)))
}
distXY <- dist(zeros)
n <- dim(zeros)[1]
k <- 5
tau <- .05
q<-2 # 2-dim config
conf0 <- cmdscale(distXY, k=q)$points
lmds.zeros.res <- lmds(as.matrix(distXY), init=conf0, ndim=q, k=k, tau=tau, itmax = 20)
conf.lmds.zeros.res <- lmds.zeros.res$conf
rownames(conf.lmds.zeros.res) <- seq(1,nrow(conf.lmds.zeros.res))
rownames(zeros) <- seq(1,nrow(zeros))
plot(conf.lmds.zeros.res, as=1,
main=paste0("Local MDS, k = ",k,", tau = ",tau),
xlab = "Dim 1", ylab = "Dim 2")
# Along x1 = 0
lmds.x1.idx <- abs(conf.lmds.zeros.res[,1]) < 2
lmds.x1 <- conf.lmds.zeros.res[which(lmds.x1.idx),1]
names(lmds.x1) <- which(lmds.x1.idx)
lmds.x1 <- sort(lmds.x1)
# Along x2 = 0
lmds.x2.idx <- abs(conf.lmds.zeros.res[,2]) < 2
lmds.x2 <- conf.lmds.zeros.res[which(lmds.x2.idx),1]
names(lmds.x2) <- which(lmds.x2.idx)
lmds.x2 <- sort(lmds.x2)
# Along x1 = x2
lmds.diag1.idx <- abs(conf.lmds.zeros.res[,1] - conf.lmds.zeros.res[,2]) < 1
lmds.diag1.temp <- conf.lmds.zeros.res[which(lmds.diag1.idx),1]
names(lmds.diag1.temp) <- which(lmds.diag1.idx)
lmds.diag1.temp <- sort(lmds.diag1.temp)
# Along x1 = -x2
lmds.diag2.idx <- abs(conf.lmds.zeros.res[,1] + conf.lmds.zeros.res[,2]) < 1
lmds.diag2.temp <- conf.lmds.zeros.res[which(lmds.diag2.idx),1]
names(lmds.diag2.temp) <- which(lmds.diag2.idx)
lmds.diag2.temp <- sort(lmds.diag2.temp)
nx1.zx2 <- as.numeric(head(names(lmds.x2), 1))
px1.zx2 <- as.numeric(tail(names(lmds.x2), 1))
zx1.nx2 <- as.numeric(head(names(lmds.x1), 1))
zx1.px2 <- as.numeric(tail(names(lmds.x1), 1))
nx1.nx2 <- as.numeric(head(names(lmds.diag1.temp), 1))
px1.px2 <- as.numeric(tail(names(lmds.diag1.temp), 1))
nx1.px2 <- as.numeric(head(names(lmds.diag2.temp), 1))
px1.nx2 <- as.numeric(tail(names(lmds.diag2.temp), 1))
centroid <- as.numeric(names(lmds.x1[length(lmds.x1)/2]), 1)
pts <- c(nx1.zx2, px1.zx2, zx1.nx2, zx1.px2, nx1.nx2, px1.px2, nx1.px2, px1.nx2, centroid)
plot(conf.lmds.zeros.res[pts,])
plot.zip(zeros[nx1.zx2,], TRUE, main = "Very negative x1, almost zero x2")
plot.zip(zeros[px1.zx2,], TRUE, main = "Very positive x1, almost zero x2")
plot.zip(zeros[zx1.nx2,], TRUE, main = "Almost zero x1, very negative x2")
plot.zip(zeros[zx1.px2,], TRUE, main = "Almost zero x1, very positive x2")
plot.zip(zeros[nx1.nx2,], TRUE, main = " Very negative x1 and x2")
plot.zip(zeros[px1.px2,], TRUE, main = "Very positive x1 and x2")
plot.zip(zeros[nx1.px2,], TRUE, main = "Very negative x1, very positive x2")
plot.zip(zeros[px1.nx2,], TRUE, main = "Very positive x1, very negative x2")
plot.zip(zeros[centroid,], TRUE, main = "Close to the origin")
ReprPoints <- function(config,refD2,refD1=NULL,setD1=F) {
config <- data.frame(config) %>% mutate(id = seq(1:nrow(config)))
colnames(config) <- c("D1","D2","id")
reflinesD2 <- c("high.D2","null.D2","low.D2")
pts <- c()
for (line in reflinesD2) {
D2condition <- switch(line, "high.D2" = (abs(config$D2 - refD2[1]) < 2),
"null.D2" = (abs(config$D2 + 0) < 1),
"low.D2"  = (abs(config$D2 + refD2[2]) < 2))
if (setD1==T) {
lowD1  <- config[D2condition,] %>% filter(abs(D1 + refD1[2]) < 2) %>% slice(1)
zeroD1 <- config[D2condition,] %>% filter(abs(D1 + 0) < 1) %>% slice(1)
highD1 <- config[D2condition,] %>% filter(abs(D1 - refD1[1]) < 2) %>% slice(1)
ids <- c(lowD1$id,zeroD1$id,highD1$id)
pts <- append(pts,ids)
} else {
res <- config[D2condition,]
res <- res %>% arrange(D1) %>% slice(c(1,round(nrow(res)/2),nrow(res)))
pts <- append(pts,res$id)
}
}
pts
}
pts <- ReprPoints(conf.lmds.zeros.res,c(15,15),c(15,15),setD1 = T)
plot(conf.lmds.zeros.res, as=1,
main=paste0("Local MDS, k=",k,", tau=",tau),
xlab = "x1", ylab = "x2", col= ifelse(rownames(conf.lmds.zeros.res) %in% pts,"magenta","black"),
pch= ifelse(rownames(conf.lmds.zeros.res) %in% pts,19,1))
PlotReprZeros <- function(pts){
mains <- c("High x2, Low x1","High x2, Around zero x1","High x2, High x1",
"Around zero x2, Low x1","Around zero x2, Around zero x1","Around zero x2, High x1",
"Low x2, Low x1","Low x2, Around zero x1","Low x2, High x1")
p <- par(mfrow=c(3,3))
for (i in 1:length(pts)) {
point <- pts[i]
plot.zip(zeros[point,],TRUE,main=mains[i])
}
par(p)
}
PlotReprZeros(pts)
library(vegan)
conf.ismp.zeros.res <- isomap(distXY,k=5,ndim=2)$points
rownames(conf.ismp.zeros.res) <- seq(1,nrow(conf.ismp.zeros.res))
plot(conf.ismp.zeros.res,main="Output of ISOMAP Algorithm", xlab="x1", ylab="x2")
# Along x1 = 0
ismp.x1.idx <- abs(conf.ismp.zeros.res[,1]) < 2
ismp.x1 <- conf.ismp.zeros.res[which(ismp.x1.idx),1]
names(ismp.x1) <- which(ismp.x1.idx)
ismp.x1 <- sort(ismp.x1)
# Along x2 = 0
ismp.x2.idx <- abs(conf.ismp.zeros.res[,2]) < 2
ismp.x2 <- conf.ismp.zeros.res[which(ismp.x2.idx),1]
names(ismp.x2) <- which(ismp.x2.idx)
ismp.x2 <- sort(ismp.x2)
# Along x1 = x2
ismp.diag1.idx <- abs(conf.ismp.zeros.res[,1] - conf.ismp.zeros.res[,2]) < 1
ismp.diag1.temp <- conf.ismp.zeros.res[which(ismp.diag1.idx),1]
names(ismp.diag1.temp) <- which(ismp.diag1.idx)
ismp.diag1.temp <- sort(ismp.diag1.temp)
# Along x1 = -x2
ismp.diag2.idx <- abs(conf.ismp.zeros.res[,1] + conf.ismp.zeros.res[,2]) < 1
ismp.diag2.temp <- conf.ismp.zeros.res[which(ismp.diag2.idx),1]
names(ismp.diag2.temp) <- which(ismp.diag2.idx)
ismp.diag2.temp <- sort(ismp.diag2.temp)
nx1.zx2 <- as.numeric(head(names(ismp.x2), 1))
px1.zx2 <- as.numeric(tail(names(ismp.x2), 1))
zx1.nx2 <- as.numeric(head(names(ismp.x1), 1))
zx1.px2 <- as.numeric(tail(names(ismp.x1), 1))
nx1.nx2 <- as.numeric(head(names(ismp.diag1.temp), 1))
px1.px2 <- as.numeric(tail(names(ismp.diag1.temp), 1))
nx1.px2 <- as.numeric(head(names(ismp.diag2.temp), 1))
px1.nx2 <- as.numeric(tail(names(ismp.diag2.temp), 1))
centroid <- as.numeric(names(ismp.x1[length(ismp.x1)/2]), 1)
pts <- c(nx1.zx2, px1.zx2, zx1.nx2, zx1.px2, nx1.nx2, px1.px2, nx1.px2, px1.nx2, centroid)
plot(conf.ismp.zeros.res[pts,])
plot.zip(zeros[nx1.zx2,], TRUE, main = "Very negative x1, almost zero x2")
plot.zip(zeros[px1.zx2,], TRUE, main = "Very positive x1, almost zero x2")
plot.zip(zeros[zx1.nx2,], TRUE, main = "Almost zero x1, very negative x2")
plot.zip(zeros[zx1.px2,], TRUE, main = "Almost zero x1, very positive x2")
plot.zip(zeros[nx1.nx2,], TRUE, main = " Very negative x1 and x2")
plot.zip(zeros[px1.px2,], TRUE, main = "Very positive x1 and x2")
plot.zip(zeros[nx1.px2,], TRUE, main = "Very negative x1, very positive x2")
plot.zip(zeros[px1.nx2,], TRUE, main = "Very positive x1, very negative x2")
plot.zip(zeros[centroid,], TRUE, main = "Close to the origin")
pts <- ReprPoints(conf.ismp.zeros.res,c(15,18),c(25,23),setD1 = T)
plot(conf.ismp.zeros.res, as=1,
main=paste0("ISOMAP MDS, k = ",k),
xlab = "Dim 1", ylab = "Dim 2",col= ifelse(rownames(conf.ismp.zeros.res) %in% pts,"magenta","black"),
pch= ifelse(rownames(conf.ismp.zeros.res) %in% pts,19,1))
PlotReprZeros(pts)
LCMC <- function(D1,D2,Kp){
D1 <- as.matrix(D1)
D2 <- as.matrix(D2)
n <- dim(D1)[1]
N.Kp.i <- numeric(n)
for (i in 1:n){
N1.i <- sort.int(D1[i,],index.return = TRUE)$ix[1:Kp]
N2.i <- sort.int(D2[i,],index.return = TRUE)$ix[1:Kp]
N.Kp.i[i] <- length(intersect(N1.i, N2.i))
}
N.Kp<-mean(N.Kp.i)
M.Kp.adj <- N.Kp/Kp - Kp/(n-1)
return(list(N.Kp.i=N.Kp.i, M.Kp.adj=M.Kp.adj))
}
q <- 2
Kp <- 10
v.k <- 3:10
LC <- numeric(length(v.k))
ISOMAP.eps <- vector("list",length(v.k))
for (i in 1:length(v.k)){
print(v.k[i])
ISOMAP.eps[[i]] <- isomap(distXY, ndim=q,
k= v.k[i])
D2.eps <- dist(ISOMAP.eps[[i]]$points[,1:q])
LC[i] <- LCMC(distXY,D2.eps,Kp)$M.Kp.adj
#print(c(i,j,LC[i,j]))
}
i.max <- which.max(LC)
k.max <- v.k[i.max]
ISOMAP.max <- ISOMAP.eps[[i.max]]
plot(v.k, LC, type="b", main=paste0("The k maximizing the LCMC is ",k.max))
abline(v=k.max,lty="dashed",col="red")
par(mfrow=c(1,2))
plot(ISOMAP.max, main=paste("Tuned ISOMAP MDS, k =",k.max),col="#cc3366",xlim=c(-65,65))
plot(conf.ismp.zeros.res, as=1, main=paste0("ISOMAP MDS, k = ",k), col="darkgreen", xlab = "Dim1", ylab = "Dim2",xlim=c(-65,65))
iso.dist  <- sort(dist(ISOMAP.max$points))
real.dist <- sort(distXY)
sample <- sample(length(real.dist),10000)
plot(iso.dist[sample],real.dist[sample],main="ISOMAP: real vs estimated distances",xlab="ISOMAP distance",
ylab="real distance")
q <- 2
Kp <- 10
K <- c(5,10,15)
tau <- c(.1,.5,1)
LC <- matrix(0,nrow=length(K),ncol=length(tau))
lmds.k.tau <- array(vector("list",1),dim=dim(LC))
for (i in 1:length(K)){
for (j in 1:length(tau)){
lmds.k.tau[[i,j]] <- lmds(as.matrix(distXY), k=K[i], ndim=q, tau=tau[j], itmax=20)
D2.k.tau <- dist(lmds.k.tau[[i,j]]$conf)
LC[i,j] <- LCMC(distXY,D2.k.tau,Kp)$M.Kp.adj
#print(c(i,j,LC[i,j]))
}
}
ij.max <- arrayInd(which.max(LC),.dim=dim(LC))
k.max <- K[ij.max[1]]
tau.max <- tau[ij.max[2]]
LocalMDS.max <- lmds.k.tau[[ij.max[1],ij.max[2]]]
print(paste0("The values maximizing the LCMC are k = ",k.max,"; tau = ",tau.max))
lmds.k5.tau1 <- lmds(as.matrix(distXY), k=5, ndim=q, tau=1, itmax=20)
lmds.k3.tau05 <- lmds(as.matrix(distXY), k=3, ndim=q, tau=0.05, itmax=20)
par(mfrow=c(2,2))
plot(LocalMDS.max$conf,main=paste("Tuned LMDS, best k = ",k.max,", best tau = ",tau.max,sep=""),
xlab="Dim 1", ylab="Dim 2",col="#cc3366",xlim=c(-150,230),ylim=c(-500,200))
plot(lmds.k5.tau1$conf,main=paste("LMDS, k = ",5,", best tau = ",tau.max,sep=""),
xlab="Dim 1", ylab="Dim 2",col="darkgreen",xlim=c(-150,230),ylim=c(-500,200))
plot(lmds.k3.tau05$conf,main=paste("LMDS, best k = ",k.max,", tau = ",0.05,sep=""),
xlab="Dim 1", ylab="Dim 2",col="darkgreen",xlim=c(-30,30),ylim=c(-30,30))
plot(conf.lmds.zeros.res,main=paste("LMDS, k = ",5,", tau = ",0.05,sep=""),
xlab="Dim 1", ylab="Dim 2",col="darkgreen",xlim=c(-30,30),ylim=c(-30,30))
LMDS.dist  <- sort(dist(LocalMDS.max$conf))
real.dist <- sort(distXY)
plot(LMDS.dist,real.dist,main="Local MDS: real vs estimated distances",xlab="LMDS distance",
ylab="real distance")
library(stops)
library(dplyr)
zip.train <- read.table("zip.train")
library(stops)
library(dplyr)
zip.train <- read.table("zip.train")
zeros <- filter(zip.train, V1==0)
zeros <- as.matrix(zeros[,-1])
# plotting 1 digit
plot.zip <- function(x,use.first=FALSE,...){ x<-as.numeric(x)
if (use.first){
x.mat <- matrix(x,16,16) }else{
x.mat <- matrix(x[-1],16,16) }
image(1:16,1:16,x.mat[,16:1], col=gray(seq(1,0,l=12)),...)
invisible(
if (!use.first){
title(x[1]) }else{
} )
#col=gray(seq(1,0,l=2)))
}
distXY <- dist(zeros)
n <- dim(zeros)[1]
k <- 5
tau <- .05
q<-2 # 2-dim config
conf0 <- cmdscale(distXY, k=q)$points
lmds.zeros.res <- lmds(as.matrix(distXY), init=conf0, ndim=q, k=k, tau=tau, itmax = 20)
conf.lmds.zeros.res <- lmds.zeros.res$conf
rownames(conf.lmds.zeros.res) <- seq(1,nrow(conf.lmds.zeros.res))
rownames(zeros) <- seq(1,nrow(zeros))
plot(conf.lmds.zeros.res, as=1,
main=paste0("Local MDS, k = ",k,", tau = ",tau),
xlab = "Dim 1", ylab = "Dim 2")
ReprPoints <- function(config,refD2,refD1=NULL,setD1=F) {
# refD2: tuple of the type (high D2 value, low D2 value)
# - If setD1=F, sort by D1 the points having D2 on the refD2 lines (and on 0)
# and pick first, middle, and last observation.
# - If setD1=T, you should also provide a refD1, of the same form of refD2.
config <- data.frame(config) %>% mutate(id = seq(1:nrow(config)))
colnames(config) <- c("D1","D2","id")
reflinesD2 <- c("high.D2","null.D2","low.D2")
pts <- c()
for (line in reflinesD2) {
D2condition <- switch(line, "high.D2" = (abs(config$D2 - refD2[1]) < 2),
"null.D2" = (abs(config$D2 + 0) < 1),
"low.D2"  = (abs(config$D2 + refD2[2]) < 2))
if (setD1==T) {
lowD1  <- config[D2condition,] %>% filter(abs(D1 + refD1[2]) < 2) %>% slice(1)
zeroD1 <- config[D2condition,] %>% filter(abs(D1 + 0) < 1) %>% slice(1)
highD1 <- config[D2condition,] %>% filter(abs(D1 - refD1[1]) < 2) %>% slice(1)
ids <- c(lowD1$id,zeroD1$id,highD1$id)
pts <- append(pts,ids)
} else {
res <- config[D2condition,]
res <- res %>% arrange(D1) %>% slice(c(1,round(nrow(res)/2),nrow(res)))
pts <- append(pts,res$id)
}
}
pts
}
pts <- ReprPoints(conf.lmds.zeros.res,c(15,15),c(15,15),setD1 = T)
plot(conf.lmds.zeros.res, as=1,
main=paste0("Local MDS, k=",k,", tau=",tau),
xlab = "x1", ylab = "x2", col= ifelse(rownames(conf.lmds.zeros.res) %in% pts,"magenta","black"),
pch= ifelse(rownames(conf.lmds.zeros.res) %in% pts,19,1))
PlotReprZeros <- function(pts){
mains <- c("High x2, Low x1","High x2, Around zero x1","High x2, High x1",
"Around zero x2, Low x1","Around zero x2, Around zero x1","Around zero x2, High x1",
"Low x2, Low x1","Low x2, Around zero x1","Low x2, High x1")
p <- par(mfrow=c(3,3))
for (i in 1:length(pts)) {
point <- pts[i]
plot.zip(zeros[point,],TRUE,main=mains[i])
}
par(p)
}
PlotReprZeros(pts)
library(vegan)
conf.ismp.zeros.res <- isomap(distXY,k=5,ndim=2)$points
rownames(conf.ismp.zeros.res) <- seq(1,nrow(conf.ismp.zeros.res))
plot(conf.ismp.zeros.res,main="Output of ISOMAP Algorithm", xlab="x1", ylab="x2")
# Along x1 = 0
ismp.x1.idx <- abs(conf.ismp.zeros.res[,1]) < 2
ismp.x1 <- conf.ismp.zeros.res[which(ismp.x1.idx),1]
names(ismp.x1) <- which(ismp.x1.idx)
ismp.x1 <- sort(ismp.x1)
# Along x2 = 0
ismp.x2.idx <- abs(conf.ismp.zeros.res[,2]) < 2
ismp.x2 <- conf.ismp.zeros.res[which(ismp.x2.idx),1]
names(ismp.x2) <- which(ismp.x2.idx)
ismp.x2 <- sort(ismp.x2)
# Along x1 = x2
ismp.diag1.idx <- abs(conf.ismp.zeros.res[,1] - conf.ismp.zeros.res[,2]) < 1
ismp.diag1.temp <- conf.ismp.zeros.res[which(ismp.diag1.idx),1]
names(ismp.diag1.temp) <- which(ismp.diag1.idx)
ismp.diag1.temp <- sort(ismp.diag1.temp)
# Along x1 = -x2
ismp.diag2.idx <- abs(conf.ismp.zeros.res[,1] + conf.ismp.zeros.res[,2]) < 1
ismp.diag2.temp <- conf.ismp.zeros.res[which(ismp.diag2.idx),1]
names(ismp.diag2.temp) <- which(ismp.diag2.idx)
ismp.diag2.temp <- sort(ismp.diag2.temp)
pts <- ReprPoints(conf.ismp.zeros.res,c(15,18),c(25,23),setD1 = T)
plot(conf.ismp.zeros.res, as=1,
main=paste0("ISOMAP MDS, k = ",k),
xlab = "Dim 1", ylab = "Dim 2",col= ifelse(rownames(conf.ismp.zeros.res) %in% pts,"magenta","black"),
pch= ifelse(rownames(conf.ismp.zeros.res) %in% pts,19,1))
PlotReprZeros(pts)
LCMC <- function(D1,D2,Kp){
D1 <- as.matrix(D1)
D2 <- as.matrix(D2)
n <- dim(D1)[1]
N.Kp.i <- numeric(n)
for (i in 1:n){
N1.i <- sort.int(D1[i,],index.return = TRUE)$ix[1:Kp]
N2.i <- sort.int(D2[i,],index.return = TRUE)$ix[1:Kp]
N.Kp.i[i] <- length(intersect(N1.i, N2.i))
}
N.Kp<-mean(N.Kp.i)
M.Kp.adj <- N.Kp/Kp - Kp/(n-1)
return(list(N.Kp.i=N.Kp.i, M.Kp.adj=M.Kp.adj))
}
q <- 2
Kp <- 10
v.k <- 3:10
LC <- numeric(length(v.k))
ISOMAP.eps <- vector("list",length(v.k))
for (i in 1:length(v.k)){
print(v.k[i])
ISOMAP.eps[[i]] <- isomap(distXY, ndim=q,
k= v.k[i])
D2.eps <- dist(ISOMAP.eps[[i]]$points[,1:q])
LC[i] <- LCMC(distXY,D2.eps,Kp)$M.Kp.adj
#print(c(i,j,LC[i,j]))
}
zeros.pca <- princomp(as.matrix(zeros))
pc1 <- zeros.pca$scores[,1]
pc2 <- zeros.pca$scores[,2]
pc3 <- zeros.pca$scores[,3]
plot(pc1, pc2)
plot(pc1, pc3)
plot(pc2, pc3)
pts12 <- ReprPoints(cbind(pc1, pc2),range(pc1))
PlotReprZeros(pts12, "PC1", "PC2")
PlotReprZeros <- function(pts, x1 = "x1", x2 = "x2"){
mains <- c(paste("High ",x2, ", Low ",x1, sep=""),
paste("High ",x2, ", Around zero ", x1, sep=""),
paste("High ",x2, ", High ", x1, sep=""),
paste("Around zero ",x2, ", Low ", x1, sep=""),
paste("Around zero ",x2, ", Around zero ", x1, sep=""),
paste("Around zero ",x2, ", High ", x1, sep=""),
paste("Low ",x2, ", Low ", x1, sep=""),
paste("Low ",x2, ", Around zero ", x1, sep=""),
paste("Low ",x2, ", High" , x1, sep=""))
p <- par(mfrow=c(3,3))
for (i in 1:length(pts)) {
point <- pts[i]
plot.zip(zeros[point,],TRUE,main=mains[i])
}
par(p)
}
pts12 <- ReprPoints(cbind(pc1, pc2),range(pc1))
PlotReprZeros(pts12, "PC1", "PC2")
pts23 <- ReprPoints(cbind(pc2, pc3),range(pc3))
PlotReprZeros(pts23, "PC2", "PC3")
pts13 <- ReprPoints(cbind(pc1, pc3),range(pc3))
PlotReprZeros(pts13, "PC1", "PC3")
